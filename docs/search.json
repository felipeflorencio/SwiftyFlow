{"Typealiases.html#/s:10SwiftyFlow20CallbackFunctionTypea":{"name":"CallbackFunctionType","abstract":"<p>Type alias that we use in our initializer and other places, convenience to show clearly the reason of why use <code>Any</code></p>"},"Protocols/FlowNavigator.html#/s:10SwiftyFlow0B9NavigatorP010navigationB0AA0B7ManagerCSgvp":{"name":"navigationFlow","abstract":"<p>Variable that expect FlowManager instance</p>","parent_name":"FlowNavigator"},"Protocols/FlowNavigator.html":{"name":"FlowNavigator","abstract":"<p>Protocol that you will need to conform in your class in order to be able when resolve your class and navigate we automatically pass the reference of the <code>flow manager</code> so you can use the navigation methods without need to manually pass the reference of the navigation manager to your class&rsquo;s</p>"},"Extensions/Array.html#/s:Sa10SwiftyFlowE4safexSgSi_tcip":{"name":"subscript(safe:)","abstract":"<p>Very helpful helper in order to get a item from array in safe way","parent_name":"Array"},"Extensions/Array.html":{"name":"Array"},"Enums.html#/s:10SwiftyFlow15ViewIntanceFromO":{"name":"ViewIntanceFrom","abstract":"<p>Enum that will be utilized when create your flow manager to identify which type is the views that we will need to resolve</p>"},"Enums.html#/s:10SwiftyFlow18NavigationPopStyleO":{"name":"NavigationPopStyle","abstract":"<p>Enum type that will be utilized when we are navigating back, <code>poping</code> the navigation, this is important in order to correct dismiss you screen.</p>"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC10navigation9container13setupInstance9dismissedACSo22UINavigationControllerCSg_AA09ContainerB5StackCAA15ViewIntanceFromOSgyycSgtcfc":{"name":"init(navigation:container:setupInstance:dismissed:)","abstract":"<p>Flow Manager initialiser</p>","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC4root9container10withCustom13setupInstance9dismissedACxm_AA09ContainerB5StackCSo22UINavigationControllerCSgAA15ViewIntanceFromOyycSgtcSo06UIViewN0CRbzlufc":{"name":"init(root:container:withCustom:setupInstance:dismissed:)","abstract":"<p>Flow Manager convenience initialiser</p>","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC5start12finishedLoadyyycSg_tF":{"name":"start(finishedLoad:)","abstract":"<p>The method responsible to start the flow, we do not start automatically when instantiate our FlowManager, so you can start as soon you want.</p>","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC6goNext6screen7resolve8resolvedyxm_AA15ViewIntanceFromOyxcSgtSo16UIViewControllerCRbzlF":{"name":"goNext(screen:resolve:resolved:)","abstract":"<p>Method responsible to navigate to the next screen</p>","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC6goNext7resolve8resolvedyAA15ViewIntanceFromO_yxcSgtSo16UIViewControllerCRbzlF":{"name":"goNext(resolve:resolved:)","abstract":"<p>Method responsible to navigate to the next screen automatically resolve and go to the","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC13goNextAsModal6screen7resolve8animated8resolved10completionACXDxmSg_AA15ViewIntanceFromOSbyxcSgyycSgtSo16UIViewControllerCRbzlF":{"name":"goNextAsModal(screen:resolve:animated:resolved:completion:)","abstract":"<p>Method responsible to navigate to the next screen using <code>Modal Presentation</code>, this method can","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC7getBack3pop6screenACXDAA18NavigationPopStyleO_yyxmXEcSgtSo16UIViewControllerCRbzlF":{"name":"getBack(pop:screen:)","abstract":"<p>This is used to get back when you are navigating using flow manager, with this","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC07dismissB10Controller8animated10completionACXDSb_yycSgtF":{"name":"dismissFlowController(animated:completion:)","abstract":"<p>Method used to dismiss completely your flow.</p>","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC06finishB4With9parameteryyp_tF":{"name":"finishFlowWith(parameter:)","abstract":"<p>Method used to pass <code>Any</code> parameter back when finish flow, as soon you implement the closure","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC09dismissedB4With9parameterACXDyypc_tF":{"name":"dismissedFlowWith(parameter:)","abstract":"<p>This should be called only when you instantiate your FlowManager as it&rsquo;s intended","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC14dismissedModal8callbackACXDyyc_tF":{"name":"dismissedModal(callback:)","abstract":"<p>This is intended to you know when you dismiss your presented modal view controller and","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC17managerNavigationSo22UINavigationControllerCSgyF":{"name":"managerNavigation()","abstract":"<p>Helper method that you can get the instance reference to the","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC9containerAA09ContainerB5StackCSgyF":{"name":"container()","abstract":"<p>Helper method that give you back the container flow stack reference</p>","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC4root9container10parameters10withCustom13setupInstance9dismissedACxm_AA09ContainerB5StackCq_ycSo22UINavigationControllerCSgAA15ViewIntanceFromOyycSgtcSo06UIViewO0CRbzr0_lufc":{"name":"init(root:container:parameters:withCustom:setupInstance:dismissed:)","abstract":"<p>Flow Manager convenience initialiser for when you want to resolve the root view controller from your navigation controller receiving parameters.</p>","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC10goNextWith6screen10parameters7resolve8resolvedyxm_q_ycAA15ViewIntanceFromOyxcSgtSo16UIViewControllerCRbzr0_lF":{"name":"goNextWith(screen:parameters:resolve:resolved:)","abstract":"<p>This is the method that we will use in order to send parameter when resolve our instance","parent_name":"FlowManager"},"Classes/FlowManager.html#/s:10SwiftyFlow0B7ManagerC26dataFromPreviousController0D0yyxXE_tlF":{"name":"dataFromPreviousController(data:)","abstract":"<p>This is intend to when you are sending parameter but you are using Storyboard as navigation","parent_name":"FlowManager"},"Classes/FlowElementContainer.html#/s:10SwiftyFlow0B16ElementContainerC5ScopeO":{"name":"Scope","abstract":"<p>Enum that will say which type of the registration you want to your instance</p>","parent_name":"FlowElementContainer"},"Classes/FlowElementContainer.html#/s:10SwiftyFlow0B16ElementContainerC0D0a":{"name":"Container","abstract":"<p>Typealias</p>","parent_name":"FlowElementContainer"},"Classes/FlowElementContainer.html#/s:10SwiftyFlow0B16ElementContainerC3for9resolvingACyxGxm_xSgyctcfc":{"name":"init(for:resolving:)","abstract":"<p>Flow element container initialiser</p>","parent_name":"FlowElementContainer"},"Classes/FlowElementContainer.html#/s:10SwiftyFlow0B16ElementContainerC3for4with9resolvingACyxGxm_ypyptcfc":{"name":"init(for:with:resolving:)","abstract":"<p>Flow element container initialiser for when you want to resolving receiving the parameters from the caller</p>","parent_name":"FlowElementContainer"},"Classes/FlowElementContainer.html#/s:10SwiftyFlow0B16ElementContainerC7inScope5scopeACyxGXDAC0F0Oyx_G_tF":{"name":"inScope(scope:)","abstract":"<p>Set the scope that we will want for this object</p>","parent_name":"FlowElementContainer"},"Classes/FlowElementContainer.html#/s:10SwiftyFlow0B16ElementContainerC4typexmyF":{"name":"type()","abstract":"<p>Return the type of this element</p>","parent_name":"FlowElementContainer"},"Classes/ContainerFlowStack.html#/s:10SwiftyFlow09ContainerB5StackCACycfc":{"name":"init()","abstract":"<p>Initializer for generate ContainerFlowStack so you can create an instance","parent_name":"ContainerFlowStack"},"Classes/ContainerFlowStack.html#/s:10SwiftyFlow09ContainerB5StackC3forACyACXE_tcfc":{"name":"init(for:)","abstract":"<p>Helper initializer that let you setup, register your depencies direct inside the","parent_name":"ContainerFlowStack"},"Classes/ContainerFlowStack.html#/s:10SwiftyFlow09ContainerB5StackC14registerModule3for7resolveAA0b7ElementC0CySo16UIViewControllerCGxm_xSgyctAJRbzlF":{"name":"registerModule(for:resolve:)","abstract":"<p>This is the registration method, it&rsquo;s used for you register the View Controllers that you will use in your flow manager, the order that you declare will be used if you use the automatic navigation method.</p>","parent_name":"ContainerFlowStack"},"Classes/ContainerFlowStack.html#/s:10SwiftyFlow09ContainerB5StackC14getModulesListSayAA0b7ElementC0CySo16UIViewControllerCGGyF":{"name":"getModulesList()","abstract":"<p>Helper method that will return all modules that you have registered inside this container</p>","parent_name":"ContainerFlowStack"},"Classes/ContainerFlowStack.html#/s:10SwiftyFlow09ContainerB5StackC22getModuleIfHasInstance3forxSgxm_tSo16UIViewControllerCRbzlF":{"name":"getModuleIfHasInstance(for:)","abstract":"<p>Helper that for check if you have this View controller instance, it&rsquo;s intended to use for you check if that instance already was instantiated or not, if you never called this instance will return nil.</p>","parent_name":"ContainerFlowStack"},"Classes/ContainerFlowStack.html#/s:10SwiftyFlow09ContainerB5StackC27registerModuleWithParameter3for7resolveAA0b7ElementC0CySo16UIViewControllerCGxm_xSgq_ctAJRbzr0_lF":{"name":"registerModuleWithParameter(for:resolve:)","abstract":"<p>This is the registration method for your view controller that you will receive some parameter when try to resolve, try to navigate using flow manager, you will be able to declare what you will expect as parameter, here you need to declare the type of the parameters that you will receive, and it&rsquo;s mandatory if you have one or more they be in the same order as when you send the parameter.</p>","parent_name":"ContainerFlowStack"},"Classes/ContainerFlowStack.html":{"name":"ContainerFlowStack","abstract":"<p>This is the class that will be responsible to create and handle the stack of the view controllers"},"Classes/FlowElementContainer.html":{"name":"FlowElementContainer","abstract":"<p>The idea of have FlowElementContainer is a way of have the reference"},"Classes/FlowManager.html":{"name":"FlowManager","abstract":"<p>Flow Manager is the core of our navigation system, it&rsquo;s using this thay you will be able to make your navigation flow, it&rsquo;s the important piece for you test your flows.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}